package org.nalby.yobatis.core.mybatis.clazz;

import org.mybatis.generator.api.IntrospectedColumn;
import org.mybatis.generator.api.dom.java.*;
import org.nalby.yobatis.core.mybatis.YobatisIntrospectedTable;
import org.nalby.yobatis.core.exception.InvalidUnitException;
import org.nalby.yobatis.core.mybatis.YobatisUnit;
import org.nalby.yobatis.core.mybatis.field.FieldFactoryImpl;
import org.nalby.yobatis.core.mybatis.method.CriteriaMethodFactory;
import org.nalby.yobatis.core.mybatis.method.CriteriaMethodType;
import org.nalby.yobatis.core.mybatis.method.MethodFactory;

public class Criteria extends TopLevelClass implements YobatisUnit {

    private String pathToPut;

    private Criteria(FullyQualifiedJavaType type, String pathToPut) {
        super(type);
        setVisibility(JavaVisibility.PUBLIC);
        this.pathToPut = pathToPut;
    }

    @Override
    public String getPathToPut() {
        return pathToPut;
    }

    @Override
    public void merge(String fileContent) throws InvalidUnitException {

    }

    private static void addMethods(Criteria criteria, YobatisIntrospectedTable table) {
        MethodFactory methodFactory = CriteriaMethodFactory.getInstance(table);
        for (CriteriaMethodType methodType : CriteriaMethodType.values()) {
            if (!methodType.isColumnRelevant()) {
                criteria.addMethod(methodFactory.create(methodType.getType()));
            }
        }
        for (IntrospectedColumn column : table.getColumns()) {
            criteria.addImportedType(column.getFullyQualifiedJavaType());
            for (CriteriaMethodType methodType : CriteriaMethodType.values()) {
                if (!methodType.isColumnRelevant()) {
                    continue;
                }
                Method method = methodFactory.create(methodType.getType(), column);
                if (method != null) {
                    criteria.addMethod(method);
                }
            }
        }
    }

    private static void addColumns(Criteria criteria, YobatisIntrospectedTable table) {
        Field columns = FieldFactoryImpl.getInstance().privateField("COLUMNS", "Set<String>");
        columns.setStatic(true);
        columns.setFinal(true);
        criteria.addField(columns);
        InitializationBlock block = new InitializationBlock(true);
        block.addBodyLine("COLUMNS = new HashSet<>();");
        table.getColumns().forEach(e -> block.addBodyLine("COLUMNS.add(\"" + e.getActualColumnName() + "\");"));
        criteria.addInitializationBlock(block);
        criteria.addImportedType(new FullyQualifiedJavaType("java.util.Set"));
        criteria.addImportedType(new FullyQualifiedJavaType("java.util.HashSet"));
        criteria.addImportedType(new FullyQualifiedJavaType("java.util.List"));
    }

    public static Criteria newInstance(YobatisIntrospectedTable table) {
        Criteria criteria = new Criteria(
                table.getFullyQualifiedJavaType(YobatisIntrospectedTable.ClassType.CRITERIA),
                table.getPathForGeneratedFile(YobatisIntrospectedTable.ClassType.CRITERIA));
        addMethods(criteria, table);
        addColumns(criteria, table);
        criteria.setSuperClass(table.getFullyQualifiedJavaType(YobatisIntrospectedTable.ClassType.BASE_CRITERIA));
        criteria.addJavaDocLine("// WARNING - @mbg.generated");
        criteria.addJavaDocLine("// This file is automatically generated by MyBatis Generator, do not modify.");
        return criteria;
    }
}
