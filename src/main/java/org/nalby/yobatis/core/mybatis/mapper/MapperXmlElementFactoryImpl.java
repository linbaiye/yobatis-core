package org.nalby.yobatis.core.mybatis.mapper;

import org.mybatis.generator.api.IntrospectedColumn;
import org.mybatis.generator.api.dom.xml.Attribute;
import org.mybatis.generator.api.dom.xml.TextElement;
import org.mybatis.generator.api.dom.xml.XmlElement;
import org.nalby.yobatis.core.database.YobatisIntrospectedTable;

import java.util.List;

public class MapperXmlElementFactoryImpl implements org.nalby.yobatis.core.mybatis.mapper.MapperXmlElementFactory {

    private final static MapperXmlElementFactoryImpl instance = new MapperXmlElementFactoryImpl();

    private YobatisIntrospectedTable table;

    private MapperXmlElementFactoryImpl() { }

    public static MapperXmlElementFactoryImpl getInstance(YobatisIntrospectedTable table) {
        instance.table = table;
        return instance;
    }

    private void addXmlComment(XmlElement xmlElement) {
        xmlElement.addElement(new TextElement("<!--"));
        xmlElement.addElement(new TextElement("  WARNING - @mbg.generated"));
        xmlElement.addElement(new TextElement("  This element is automatically generated by MyBatis Generator, do not modify."));
        xmlElement.addElement(new TextElement("-->"));
    }

    private XmlElement baseResultMap() {
        XmlElement xmlElement = xmlTemplate("resultMap", XmlElementName.BASE_RESULT_MAP.getName());
        xmlElement.addAttribute(new Attribute("type", table.getFullyQualifiedJavaType(YobatisIntrospectedTable.ClassType.ENTITY).getFullyQualifiedName()));
        for (IntrospectedColumn column : table.getColumns()) {
            XmlElement columnMap;
            if (column.isIdentity()) {
                columnMap = new XmlElement("id");
            } else {
                columnMap = new XmlElement("result");
            }
            columnMap.addAttribute(new Attribute("column", column.getActualColumnName()));
            columnMap.addAttribute(new Attribute("jdbcType", column.getJdbcTypeName()));
            columnMap.addAttribute(new Attribute("property", column.getJavaProperty()));
            xmlElement.addElement(columnMap);
        }
        return xmlElement;
    }


    private XmlElement whenElement(String test, String text) {
        XmlElement xmlElement = new XmlElement("when");
        xmlElement.addAttribute(new Attribute("test", test));
        xmlElement.addElement(new TextElement(text));
        return xmlElement;
    }


    private XmlElement foreach(String collection, String item) {
        XmlElement foreach = new XmlElement("foreach");
        foreach.addAttribute(new Attribute("collection", collection));
        foreach.addAttribute(new Attribute("item", item));
        return foreach;
    }


    private XmlElement whereClause(boolean forUpdate) {
        XmlElement xmlElement = new XmlElement("sql");
        if (forUpdate) {
            xmlElement.addAttribute(new Attribute("id", XmlElementName.WHERE_CLAUSE_FOR_UPDATE.getName()));
        } else {
            xmlElement.addAttribute(new Attribute("id", XmlElementName.WHERE_CLAUSE.getName()));
        }
        addXmlComment(xmlElement);

        XmlElement choose = new XmlElement("choose");
        choose.addElement(whenElement("criterion.noValue", "and ${criterion.condition}"));
        choose.addElement(whenElement("criterion.singleValue", "and ${criterion.condition} #{criterion.value}"));
        choose.addElement(whenElement("criterion.betweenValue", "and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}"));
        XmlElement when = whenElement("criterion.listValue", "and ${criterion.condition}");
        XmlElement foreach = foreach("criterion.value", "listItem");
        foreach.addAttribute(new Attribute("close", ")"));
        foreach.addAttribute(new Attribute("open", "("));
        foreach.addAttribute(new Attribute("separator", ","));
        foreach.addElement(new TextElement("#{listItem}"));
        when.addElement(foreach);
        choose.addElement(when);

        foreach = foreach("bracketCriteria.criteria", "criterion");
        foreach.addElement(choose);

        XmlElement trim = new XmlElement("trim");
        trim.addAttribute(new Attribute("prefix", "("));
        trim.addAttribute(new Attribute("prefixOverrides", "and"));
        trim.addAttribute(new Attribute("suffix", ")"));
        trim.addElement(foreach);

        XmlElement ifE = ifElement("bracketCriteria.valid");
        ifE.addElement(trim);
        if (forUpdate) {
            foreach = foreach("criteria.oredCriteria", "bracketCriteria");
        }  else {
            foreach = foreach("oredCriteria", "bracketCriteria");
        }
        foreach.addAttribute(new Attribute("separator", "or"));
        foreach.addElement(ifE);

        XmlElement where = new XmlElement("where");
        where.addElement(foreach);
        xmlElement.addElement(where);
        return xmlElement;
    }

    private XmlElement xmlTemplate(String name, String id) {
        XmlElement xmlElement = new XmlElement(name);
        xmlElement.addAttribute(new Attribute("id", id));
        addXmlComment(xmlElement);
        return xmlElement;
    }

    private XmlElement ifElement(String test) {
        XmlElement xmlElement = new XmlElement("if");
        xmlElement.addAttribute(new Attribute("test", test));
        return xmlElement;
    }

    private XmlElement paging() {
        XmlElement xmlElement = new XmlElement("sql");
        xmlElement.addAttribute(new Attribute("id", XmlElementName.PAGING.getName()));
        addXmlComment(xmlElement);
        XmlElement ifElement = ifElement("offset != null");
        ifElement.addElement(new TextElement("offset #{offset}"));
        xmlElement.addElement(ifElement);

        ifElement = ifElement("limit != null");
        ifElement.addElement(new TextElement("limit #{limit}"));
        xmlElement.addElement(ifElement);
        return xmlElement;
    }

    private boolean appendLineBreak(StringBuilder stringBuilder, int index) {
        if ((index + 1) % 5 == 0 && index != table.getColumns().size() - 1) {
            stringBuilder.append("\n");
            return true;
        }
        return false;
    }

    private void prettyTableColumns(StringBuilder stringBuilder, IntrospectedColumn column, int index) {
        stringBuilder.append(column.getActualColumnName());
        if (index != table.getColumns().size() - 1) {
            stringBuilder.append(", ");
        }
        if (appendLineBreak(stringBuilder, index)) {
            stringBuilder.append("  ");
        }
    }

    private XmlElement baseColumnList() {
        XmlElement xmlElement = xmlTemplate("sql", XmlElementName.BASE_COLUMN_LIST.getName());
        StringBuilder stringBuilder = new StringBuilder();
        for (int i = 0; i < table.getColumns().size(); i++) {
            prettyTableColumns(stringBuilder, table.getColumns().get(i), i);
        }
        xmlElement.addElement(new TextElement(stringBuilder.toString()));
        return xmlElement;
    }

    private XmlElement includeElement(String id) {
        XmlElement include = new XmlElement("include");
        include.addAttribute(new Attribute("refid", id));
        return include;
    }

    private XmlElement selectElementTemplate(String id, String paramType) {
        XmlElement xmlElement = xmlTemplate("select", id);
        xmlElement.addAttribute(new Attribute("parameterType", paramType));
        xmlElement.addAttribute(new Attribute("resultMap", XmlElementName.BASE_RESULT_MAP.getName()));
        xmlElement.addElement(new TextElement("select"));
        xmlElement.addElement(includeElement(XmlElementName.BASE_COLUMN_LIST.getName()));
        return xmlElement;
    }

    private String columnAsRightOperand(IntrospectedColumn column) {
        return "#{" + column.getJavaProperty() + ",jdbcType=" + column.getJdbcTypeName() + "}";
    }


    private void appendByPkClause(StringBuilder stringBuilder) {
        List<IntrospectedColumn> pkColumns = table.getPrimaryKeyColumns();
        for (int i = 0; i < pkColumns.size(); i++) {
            IntrospectedColumn column = pkColumns.get(i);
            if (i > 0) {
                stringBuilder.append("    and ");
            }
            stringBuilder.append(column.getActualColumnName());
            stringBuilder.append(" = ");
            stringBuilder.append(columnAsRightOperand(column));
            if (i != pkColumns.size() - 1) {
                stringBuilder.append("\n");
            }
        }
    }

    private XmlElement selectByPk() {
        XmlElement xmlElement = selectElementTemplate(XmlElementName.SELECT_BY_PK.getName(), table.getPrimaryKey().getFullyQualifiedName());
        StringBuilder stringBuilder = new StringBuilder("from " + table.getTableName() + " where\n    ");
        appendByPkClause(stringBuilder);
        xmlElement.addElement(new TextElement(stringBuilder.toString()));
        return xmlElement;
    }

    private XmlElement selectByCriteria() {
        XmlElement xmlElement = selectElementTemplate(XmlElementName.SELECT_BY_CRITERIA.getName(), table.getFullyQualifiedJavaType(
                YobatisIntrospectedTable.ClassType.CRITERIA).getFullyQualifiedName());
        xmlElement.addElement(new TextElement("from " + table.getTableName()));
        XmlElement ifElement = ifElement("_parameter != null");
        ifElement.addElement(includeElement("WHERE_CLAUSE"));
        xmlElement.addElement(ifElement);

        ifElement = ifElement("orderByClause != null");
        ifElement.addElement(new TextElement("order by ${orderByClause}"));
        xmlElement.addElement(ifElement);

        xmlElement.addElement(includeElement("PAGING"));
        ifElement = ifElement("forUpdate");
        ifElement.addElement(new TextElement("for update"));
        xmlElement.addElement(ifElement);

        return xmlElement;
    }

    private XmlElement count() {
        XmlElement xmlElement = xmlTemplate("select", XmlElementName.COUNT.getName());
        xmlElement.addAttribute(new Attribute("parameterType", table.getFullyQualifiedJavaType(YobatisIntrospectedTable.ClassType.CRITERIA).getFullyQualifiedName()));
        xmlElement.addAttribute(new Attribute("resultType", "int"));
        xmlElement.addElement(new TextElement("select count(*) from " + table.getTableName()));
        XmlElement ifE = ifElement("_parameter != null");
        ifE.addElement(includeElement("WHERE_CLAUSE"));
        xmlElement.addElement(ifE);
        return xmlElement;
    }

    private XmlElement updateTemplate(String name, String param) {
        XmlElement xmlElement = xmlTemplate("update", name);
        xmlElement.addAttribute(new Attribute("resultType", "int"));
        xmlElement.addAttribute(new Attribute("parameterType", param));
        xmlElement.addElement(new TextElement("update " + table.getTableName()));
        return xmlElement;
    }

    private XmlElement ifForUpdate(IntrospectedColumn column, String container) {
        XmlElement ifElement = new XmlElement("if");
        String javaProperty = container == null ? column.getJavaProperty() : container + "." + column.getJavaProperty();
        ifElement.addAttribute(new Attribute("test", javaProperty + " != null" ));
        ifElement.addElement(new TextElement(column.getActualColumnName() + " = #{" + javaProperty + ",jdbcType=" + column.getJdbcTypeName() + "},"));
        return ifElement;
    }

    private XmlElement updateByPk() {
        XmlElement update = updateTemplate(XmlElementName.UPDATE_BY_PK.getName(), table.getPrimaryKey().getFullyQualifiedName());
        XmlElement set = new XmlElement("set");
        update.addElement(set);
        boolean isAllKeyTable = table.getPrimaryKeyColumns().size() == table.getColumns().size();
        for (IntrospectedColumn column : table.getColumns()) {
            if (!column.isIdentity() || isAllKeyTable) {
                set.addElement(ifForUpdate(column, null));
            }
        }
        StringBuilder stringBuilder = new StringBuilder("where ");
        appendByPkClause(stringBuilder);
        update.addElement(new TextElement(stringBuilder.toString()));
        return update;
    }

    private XmlElement updateByCriteria() {
        XmlElement update = updateTemplate(XmlElementName.UPDATE_BY_CRITERIA.getName(), "map");
        XmlElement set = new XmlElement("set");
        update.addElement(set);
        for (IntrospectedColumn column : table.getColumns()) {
            set.addElement(ifForUpdate(column, "record"));
        }
        XmlElement ifElement = ifElement("_parameter != null");
        ifElement.addElement(includeElement("WHERE_CLAUSE_FOR_UPDATE"));
        update.addElement(ifElement);
        return update;
    }

    private void appendSelectKey(XmlElement xmlElement) {
        if (!table.isAutoIncPrimaryKey()) {
            return;
        }
        IntrospectedColumn primaryKey = table.getPrimaryKeyColumns().get(0);
        XmlElement selectKey = new XmlElement("selectKey");
        selectKey.addAttribute(new Attribute("order", "AFTER"));
        selectKey.addAttribute(new Attribute("resultType", primaryKey.getFullyQualifiedJavaType().getShortName()));
        selectKey.addAttribute(new Attribute("keyProperty", primaryKey.getJavaProperty()));
        XmlElement ifElement = ifElement(primaryKey.getJavaProperty() + " == null");
        ifElement.addElement(new TextElement("select last_insert_id()"));
        selectKey.addElement(ifElement);
        ifElement = ifElement(primaryKey.getJavaProperty() + " != null");
        ifElement.addElement(new TextElement("select #{" + primaryKey.getJavaProperty() + "}"));
        selectKey.addElement(ifElement);
        xmlElement.addElement(selectKey);
    }


    private XmlElement insert() {
        XmlElement xmlElement = xmlTemplate("insert", XmlElementName.INSERT.getName());
        xmlElement.addAttribute(new Attribute("parameterType", table.getFullyQualifiedJavaType(YobatisIntrospectedTable.ClassType.BASE_ENTITY).getFullyQualifiedName()));
        xmlElement.addAttribute(new Attribute("resultType", "int"));
        xmlElement.addElement(new TextElement("insert into " + table.getTableName()));
        StringBuilder stringBuilder = new StringBuilder("(");
        for (int i = 0; i < table.getColumns().size(); i++) {
            IntrospectedColumn column = table.getColumns().get(i);
            prettyTableColumns(stringBuilder, column, i);
        }
        stringBuilder.append(")");
        xmlElement.addElement(new TextElement(stringBuilder.toString()));
        stringBuilder = new StringBuilder("values (");
        for (int i = 0; i < table.getColumns().size(); i++) {
            IntrospectedColumn column = table.getColumns().get(i);
            stringBuilder.append(columnAsRightOperand(column));
            if (i != table.getColumns().size() - 1) {
                stringBuilder.append(", ");
            }
            if (appendLineBreak(stringBuilder, i)) {
                stringBuilder.append("  ");
            }
        }
        stringBuilder.append(")");
        xmlElement.addElement(new TextElement(stringBuilder.toString()));
        appendSelectKey(xmlElement);
        return xmlElement;
    }

    private XmlElement deletelTemplate(String id, String param) {
        XmlElement delete = xmlTemplate("delete", id);
        delete.addAttribute(new Attribute("resultType", "int"));
        delete.addAttribute(new Attribute("parameterType", param));
        delete.addElement(new TextElement("delete from " + table.getTableName()));
        return delete;
    }

    private XmlElement deleteByPk() {
        XmlElement delete = deletelTemplate(XmlElementName.DELETE_BY_PK.getName(),
                table.getPrimaryKey().getFullyQualifiedName());
        StringBuilder stringBuilder = new StringBuilder("where ");
        appendByPkClause(stringBuilder);
        delete.addElement(new TextElement(stringBuilder.toString()));
        return delete;
    }

    private XmlElement deleteByCriteria() {
        XmlElement delete = deletelTemplate(XmlElementName.DELETE_BY_CRITERIA.getName(),
                table.getFullyQualifiedJavaType(YobatisIntrospectedTable.ClassType.CRITERIA).getFullyQualifiedName());
        XmlElement ifElement = ifElement("_parameter != null");
        XmlElement includeElement = includeElement("WHERE_CLAUSE");
        ifElement.addElement(includeElement);
        delete.addElement(ifElement);
        return delete;
    }

    @Override
    public XmlElement create(String name) {
        if (XmlElementName.WHERE_CLAUSE.nameEquals(name)) {
            return whereClause(false);
        } else if (XmlElementName.WHERE_CLAUSE_FOR_UPDATE.nameEquals(name)) {
            return whereClause(true);
        } else if (XmlElementName.PAGING.nameEquals(name)) {
            return paging();
        } else if (XmlElementName.BASE_RESULT_MAP.nameEquals(name)) {
            return baseResultMap();
        } else if (XmlElementName.BASE_COLUMN_LIST.nameEquals(name)) {
            return baseColumnList();
        } else if (XmlElementName.SELECT_BY_PK.nameEquals(name)) {
            return selectByPk();
        } else if (XmlElementName.SELECT_BY_CRITERIA.nameEquals(name)) {
            return selectByCriteria();
        } else if (XmlElementName.INSERT.nameEquals(name)) {
            return insert();
        } else if (XmlElementName.UPDATE_BY_PK.nameEquals(name)) {
            return updateByPk();
        } else if (XmlElementName.UPDATE_BY_CRITERIA.nameEquals(name)) {
            return updateByCriteria();
        } else if (XmlElementName.COUNT.nameEquals(name)) {
            return count();
        } else if (XmlElementName.DELETE_BY_PK.nameEquals(name)) {
            return deleteByPk();
        } else if (XmlElementName.DELETE_BY_CRITERIA.nameEquals(name)) {
            return deleteByCriteria();
        }
        throw new IllegalArgumentException("Unknown name:" + name);
    }
}
