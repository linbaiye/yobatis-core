package org.nalby.yobatis.core.mybatis.mapper;

import org.mybatis.generator.api.IntrospectedColumn;
import org.mybatis.generator.api.dom.xml.Attribute;
import org.mybatis.generator.api.dom.xml.TextElement;
import org.mybatis.generator.api.dom.xml.XmlElement;
import org.nalby.yobatis.core.database.YobatisIntrospectedTable;

import java.util.List;

public class MapperXmlElementFactoryImpl implements org.nalby.yobatis.core.mybatis.mapper.MapperXmlElementFactory {

    private final static MapperXmlElementFactoryImpl instance = new MapperXmlElementFactoryImpl();

    private YobatisIntrospectedTable table;

    private MapperXmlElementFactoryImpl() { }

    public static MapperXmlElementFactoryImpl getInstance(YobatisIntrospectedTable table) {
        instance.table = table;
        return instance;
    }

    private void addXmlComment(XmlElement xmlElement) {
        xmlElement.addElement(new TextElement("<!--"));
        xmlElement.addElement(new TextElement("  WARNING - @mbg.generated"));
        xmlElement.addElement(new TextElement("  This element is automatically generated by MyBatis Generator, do not modify."));
        xmlElement.addElement(new TextElement("-->"));
    }

    private XmlElement baseResultMap() {
        XmlElement xmlElement = xmlTemplate("resultMap", XmlElementName.BASE_RESULT_MAP.getName());
        xmlElement.addAttribute(new Attribute("type", table.getFullyQualifiedJavaType(YobatisIntrospectedTable.ClassType.ENTITY).getFullyQualifiedName()));
        for (IntrospectedColumn column : table.getColumns()) {
            XmlElement columnMap;
            if (column.isIdentity()) {
                columnMap = new XmlElement("id");
            } else {
                columnMap = new XmlElement("result");
            }
            columnMap.addAttribute(new Attribute("column", column.getActualColumnName()));
            columnMap.addAttribute(new Attribute("jdbcType", column.getJdbcTypeName()));
            columnMap.addAttribute(new Attribute("property", column.getJavaProperty()));
            xmlElement.addElement(columnMap);
        }
        return xmlElement;
    }

    private XmlElement whereClause() {
        XmlElement xmlElement = new XmlElement("sql");
        xmlElement.addAttribute(new Attribute("id", XmlElementName.WHERE_CLAUSE.getName()));
        xmlElement.addElement(new TextElement("<!--\n" +
                "    WARNING - @mbg.generated\n" +
                "    This element is automatically generated by MyBatis Generator, do not modify.\n" +
                "  -->\n" +
                "  <where>\n" +
                "    <foreach collection=\"oredCriteria\" item=\"bracketCriteria\" separator=\"or\">\n" +
                "      <if test=\"bracketCriteria.valid\">\n" +
                "        <trim prefix=\"(\" prefixOverrides=\"and\" suffix=\")\">\n" +
                "          <foreach collection=\"bracketCriteria.criteria\" item=\"criterion\">\n" +
                "            <choose>\n" +
                "              <when test=\"criterion.noValue\">\n" +
                "                and ${criterion.condition}\n" +
                "              </when>\n" +
                "              <when test=\"criterion.singleValue\">\n" +
                "                and ${criterion.condition} #{criterion.value}\n" +
                "              </when>\n" +
                "              <when test=\"criterion.betweenValue\">\n" +
                "                and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}\n" +
                "              </when>\n" +
                "              <when test=\"criterion.listValue\">\n" +
                "                and ${criterion.condition}\n" +
                "                <foreach close=\")\" collection=\"criterion.value\" item=\"listItem\" open=\"(\" separator=\",\">\n" +
                "                  #{listItem}\n" +
                "                </foreach>\n" +
                "              </when>\n" +
                "            </choose>\n" +
                "          </foreach>\n" +
                "        </trim>\n" +
                "      </if>\n" +
                "    </foreach>\n" +
                "  </where>"));
        return xmlElement;
    }

    private XmlElement whereClauseForUpdate() {
        XmlElement xmlElement = new XmlElement("sql");
        xmlElement.addAttribute(new Attribute("id", XmlElementName.WHERE_CLAUSE_FOR_UPDATE.getName()));
        xmlElement.addElement(new TextElement("<!--\n" +
                "    WARNING - @mbg.generated\n" +
                "    This element is automatically generated by MyBatis Generator, do not modify.\n" +
                "  -->\n" +
                "  <where>\n" +
                "    <foreach collection=\"criteria.oredCriteria\" item=\"bracketCriteria\" separator=\"or\">\n" +
                "      <if test=\"bracketCriteria.valid\">\n" +
                "        <trim prefix=\"(\" prefixOverrides=\"and\" suffix=\")\">\n" +
                "          <foreach collection=\"bracketCriteria.criteria\" item=\"criterion\">\n" +
                "            <choose>\n" +
                "              <when test=\"criterion.noValue\">\n" +
                "                and ${criterion.condition}\n" +
                "              </when>\n" +
                "              <when test=\"criterion.singleValue\">\n" +
                "                and ${criterion.condition} #{criterion.value}\n" +
                "              </when>\n" +
                "              <when test=\"criterion.betweenValue\">\n" +
                "                and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}\n" +
                "              </when>\n" +
                "              <when test=\"criterion.listValue\">\n" +
                "                and ${criterion.condition}\n" +
                "                <foreach close=\")\" collection=\"criterion.value\" item=\"listItem\" open=\"(\" separator=\",\">\n" +
                "                  #{listItem}\n" +
                "                </foreach>\n" +
                "              </when>\n" +
                "            </choose>\n" +
                "          </foreach>\n" +
                "        </trim>\n" +
                "      </if>\n" +
                "    </foreach>\n" +
                "  </where>"));
        return xmlElement;
    }

    private XmlElement xmlTemplate(String name, String id) {
        XmlElement xmlElement = new XmlElement(name);
        xmlElement.addAttribute(new Attribute("id", id));
        addXmlComment(xmlElement);
        return xmlElement;
    }

    private XmlElement paging() {
        XmlElement xmlElement = new XmlElement("sql");
        xmlElement.addAttribute(new Attribute("id", XmlElementName.PAGING.getName()));
        xmlElement.addElement(new TextElement("<!--\n" +
                "    WARNING - @mbg.generated\n" +
                "    This element is automatically generated by MyBatis Generator, do not modify.\n" +
                "  -->\n" +
                "  <if test=\"offset != null\">\n" +
                "    offset #{offset}\n" +
                "  </if>\n" +
                "  <if test=\"limit != null\">\n" +
                "    limit #{limit}\n" +
                "  </if>"));
        return xmlElement;
    }

    private boolean appendLineBreak(StringBuilder stringBuilder, int index) {
        if ((index + 1) % 5 == 0 && index != table.getColumns().size() - 1) {
            stringBuilder.append("\n");
            return true;
        }
        return false;
    }

    private void prettyTableColumns(StringBuilder stringBuilder, IntrospectedColumn column, int index) {
        stringBuilder.append(column.getActualColumnName());
        if (index != table.getColumns().size() - 1) {
            stringBuilder.append(", ");
        }
        if (appendLineBreak(stringBuilder, index)) {
            stringBuilder.append("  ");
        }
    }

    private XmlElement baseColumnList() {
        XmlElement xmlElement = xmlTemplate("sql", XmlElementName.BASE_COLUMN_LIST.getName());
        StringBuilder stringBuilder = new StringBuilder();
        for (int i = 0; i < table.getColumns().size(); i++) {
            prettyTableColumns(stringBuilder, table.getColumns().get(i), i);
        }
        xmlElement.addElement(new TextElement(stringBuilder.toString()));
        return xmlElement;
    }

    private XmlElement includeElement(String id) {
        XmlElement include = new XmlElement("include");
        include.addAttribute(new Attribute("refid", id));
        return include;
    }

    private XmlElement selectElementTemplate(String id, String paramType) {
        XmlElement xmlElement = xmlTemplate("select", id);
        xmlElement.addAttribute(new Attribute("parameterType", paramType));
        xmlElement.addAttribute(new Attribute("resultMap", XmlElementName.BASE_RESULT_MAP.getName()));
        xmlElement.addElement(new TextElement("select"));
        xmlElement.addElement(includeElement(XmlElementName.BASE_COLUMN_LIST.getName()));
        return xmlElement;
    }

    private String columnAsRightOperand(IntrospectedColumn column) {
        return "#{" + column.getJavaProperty() + ",jdbcType=" + column.getJdbcTypeName() + "}";
    }


    private void appendByPkClause(StringBuilder stringBuilder) {
        List<IntrospectedColumn> pkColumns = table.getPrimaryKeyColumns();
        for (int i = 0; i < pkColumns.size(); i++) {
            IntrospectedColumn column = pkColumns.get(i);
            if (i > 0) {
                stringBuilder.append("    and ");
            }
            stringBuilder.append(column.getActualColumnName());
            stringBuilder.append(" = ");
            stringBuilder.append(columnAsRightOperand(column));
            if (i != pkColumns.size() - 1) {
                stringBuilder.append("\n");
            }
        }
    }

    private XmlElement selectByPk() {
        XmlElement xmlElement = selectElementTemplate(XmlElementName.SELECT_ONE_BY_PK.getName(), table.getPrimaryKey().getFullyQualifiedName());
        StringBuilder stringBuilder = new StringBuilder("from " + table.getTableName() + " where\n    ");
        appendByPkClause(stringBuilder);
        xmlElement.addElement(new TextElement(stringBuilder.toString()));
        return xmlElement;
    }

    private XmlElement selectByCriteria() {
        XmlElement xmlElement = selectElementTemplate(XmlElementName.SELECT_BY_CRITERIA.getName(), table.getFullyQualifiedJavaType(
                YobatisIntrospectedTable.ClassType.CRITERIA).getFullyQualifiedName());
        String stringBuilder = "from " + table.getTableName() + "\n" +
                "  <if test=\"_parameter != null\">\n" +
                "    <include refid=\"WHERE_CLAUSE\" />\n" +
                "  </if>\n" +
                "  <if test=\"orderByClause != null\">\n" +
                "    order by ${orderByClause}\n" +
                "  </if>\n" +
                "  <include refid=\"PAGING\" />\n" +
                "  <if test=\"forUpdate\">\n" +
                "    for update\n" +
                "  </if>";
        xmlElement.addElement(new TextElement(stringBuilder));
        return xmlElement;
    }

    private XmlElement count() {
        XmlElement xmlElement = xmlTemplate("select", XmlElementName.COUNT.getName());
        xmlElement.addAttribute(new Attribute("parameterType", table.getFullyQualifiedJavaType(YobatisIntrospectedTable.ClassType.CRITERIA).getFullyQualifiedName()));
        xmlElement.addAttribute(new Attribute("resultType", "int"));
        String content = "select count(*) from " + table.getTableName() + "\n" +
                "  <if test=\"_parameter != null\">\n" +
                "    <include refid=\"WHERE_CLAUSE\" />\n" +
                "  </if>";
        xmlElement.addElement(new TextElement(content));
        return xmlElement;
    }

    private XmlElement updateTemplate(String name, String param) {
        XmlElement xmlElement = xmlTemplate("update", name);
        xmlElement.addAttribute(new Attribute("resultType", "int"));
        xmlElement.addAttribute(new Attribute("parameterType", param));
        xmlElement.addElement(new TextElement("update " + table.getTableName()));
        return xmlElement;
    }

    private XmlElement ifForUpdate(IntrospectedColumn column, String container) {
        XmlElement ifElement = new XmlElement("if");
        String javaProperty = container == null ? column.getJavaProperty() : container + "." + column.getJavaProperty();
        ifElement.addAttribute(new Attribute("test", javaProperty + " != null" ));
        ifElement.addElement(new TextElement(column.getActualColumnName() + " = #{" + javaProperty + ",jdbcType=" + column.getJdbcTypeName() + "},"));
        return ifElement;
    }

    private XmlElement updateByPk() {
        XmlElement update = updateTemplate(XmlElementName.UPDATE_BY_PK.getName(), table.getPrimaryKey().getFullyQualifiedName());
        XmlElement set = new XmlElement("set");
        update.addElement(set);
        boolean isAllKeyTable = table.getPrimaryKeyColumns().size() == table.getColumns().size();
        for (IntrospectedColumn column : table.getColumns()) {
            if (!column.isIdentity() || isAllKeyTable) {
                set.addElement(ifForUpdate(column, null));
            }
        }
        StringBuilder stringBuilder = new StringBuilder("where ");
        appendByPkClause(stringBuilder);
        update.addElement(new TextElement(stringBuilder.toString()));
        return update;
    }

    private XmlElement updateByCriteria() {
        XmlElement update = updateTemplate(XmlElementName.UPDATE_BY_CRITERIA.getName(), "map");
        XmlElement set = new XmlElement("set");
        update.addElement(set);
        for (IntrospectedColumn column : table.getColumns()) {
            set.addElement(ifForUpdate(column, "record"));
        }
        String where = "<if test=\"_parameter != null\">\n" +
                       "    <include refid=\"WHERE_CLAUSE_FOR_UPDATE\" />\n" +
                       "  </if>";
        update.addElement(new TextElement(where));
        return update;
    }


    private void appendSelectKey(StringBuilder stringBuilder) {
        if (table.isAutoIncPrimaryKey()) {
            IntrospectedColumn primaryKey = table.getPrimaryKeyColumns().get(0);
            stringBuilder.append("\n  <selectKey order=\"AFTER\" resultType=\"");
            stringBuilder.append(primaryKey.getFullyQualifiedJavaType().getShortName());
            stringBuilder.append("\" keyProperty=\"");
            stringBuilder.append(primaryKey.getJavaProperty());
            stringBuilder.append("\">\n");
            stringBuilder.append("    <if test=\"");
            stringBuilder.append(primaryKey.getJavaProperty());
            stringBuilder.append(" == null\">\n");
            stringBuilder.append("      select last_insert_id()\n");
            stringBuilder.append("    </if>\n");
            stringBuilder.append("    <if test=\"");
            stringBuilder.append(primaryKey.getJavaProperty());
            stringBuilder.append(" != null\">\n");
            stringBuilder.append("      select #{");
            stringBuilder.append(primaryKey.getJavaProperty());
            stringBuilder.append("}\n");
            stringBuilder.append("    </if>\n");
            stringBuilder.append("  </selectKey>");
        }
    }

    private XmlElement insert() {
        XmlElement xmlElement = xmlTemplate("insert", XmlElementName.INSERT.getName());
        xmlElement.addAttribute(new Attribute("parameterType", table.getFullyQualifiedJavaType(YobatisIntrospectedTable.ClassType.BASE_ENTITY).getFullyQualifiedName()));
        xmlElement.addAttribute(new Attribute("resultType", "int"));
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("insert into ");
        stringBuilder.append(table.getTableName());
        stringBuilder.append("\n  (");
        for (int i = 0; i < table.getColumns().size(); i++) {
            IntrospectedColumn column = table.getColumns().get(i);
            prettyTableColumns(stringBuilder, column, i);
        }
        stringBuilder.append(")\n  values (");
        for (int i = 0; i < table.getColumns().size(); i++) {
            IntrospectedColumn column = table.getColumns().get(i);
            stringBuilder.append(columnAsRightOperand(column));
            if (i != table.getColumns().size() - 1) {
                stringBuilder.append(", ");
            }
            if (appendLineBreak(stringBuilder, i)) {
                stringBuilder.append("  ");
            }
        }
        stringBuilder.append(")");
        appendSelectKey(stringBuilder);
        xmlElement.addElement(new TextElement(stringBuilder.toString()));
        return xmlElement;
    }

    private XmlElement deletelTemplate(String id, String param) {
        XmlElement delete = xmlTemplate("delete", id);
        delete.addAttribute(new Attribute("resultType", "int"));
        delete.addAttribute(new Attribute("parameterType", param));
        delete.addElement(new TextElement("delete from " + table.getTableName()));
        return delete;
    }

    private XmlElement deleteByPk() {
        XmlElement delete = deletelTemplate(XmlElementName.DELETE_BY_PK.getName(),
                table.getPrimaryKey().getFullyQualifiedName());
        StringBuilder stringBuilder = new StringBuilder("where ");
        appendByPkClause(stringBuilder);
        delete.addElement(new TextElement(stringBuilder.toString()));
        return delete;
    }

    private XmlElement deleteByCriteria() {
        XmlElement delete = deletelTemplate(XmlElementName.DELETE_BY_CRITERIA.getName(),
                table.getFullyQualifiedJavaType(YobatisIntrospectedTable.ClassType.CRITERIA).getFullyQualifiedName());
        String where ="<if test=\"_parameter != null\">\n" +
                      "    <include refid=\"WHERE_CLAUSE\" />\n" +
                      "  </if>";
        delete.addElement(new TextElement(where));
        return delete;
    }

    @Override
    public XmlElement create(String name) {
        if (XmlElementName.WHERE_CLAUSE.nameEquals(name)) {
            return whereClause();
        } else if (XmlElementName.WHERE_CLAUSE_FOR_UPDATE.nameEquals(name)) {
            return whereClauseForUpdate();
        } else if (XmlElementName.PAGING.nameEquals(name)) {
            return paging();
        } else if (XmlElementName.BASE_RESULT_MAP.nameEquals(name)) {
            return baseResultMap();
        } else if (XmlElementName.BASE_COLUMN_LIST.nameEquals(name)) {
            return baseColumnList();
        } else if (XmlElementName.SELECT_ONE_BY_PK.nameEquals(name)) {
            return selectByPk();
        } else if (XmlElementName.SELECT_BY_CRITERIA.nameEquals(name)) {
            return selectByCriteria();
        } else if (XmlElementName.INSERT.nameEquals(name)) {
            return insert();
        } else if (XmlElementName.UPDATE_BY_PK.nameEquals(name)) {
            return updateByPk();
        } else if (XmlElementName.UPDATE_BY_CRITERIA.nameEquals(name)) {
            return updateByCriteria();
        } else if (XmlElementName.COUNT.nameEquals(name)) {
            return count();
        } else if (XmlElementName.DELETE_BY_PK.nameEquals(name)) {
            return deleteByPk();
        } else if (XmlElementName.DELETE_BY_CRITERIA.nameEquals(name)) {
            return deleteByCriteria();
        }
        throw new IllegalArgumentException("Unknown name");
    }
}
