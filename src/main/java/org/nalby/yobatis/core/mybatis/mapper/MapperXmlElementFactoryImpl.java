package org.nalby.yobatis.core.mybatis.mapper;

import org.mybatis.generator.api.IntrospectedColumn;
import org.mybatis.generator.api.dom.xml.Attribute;
import org.mybatis.generator.api.dom.xml.TextElement;
import org.mybatis.generator.api.dom.xml.XmlElement;
import org.nalby.yobatis.core.database.YobatisIntrospectedTable;

import java.util.List;

public class MapperXmlElementFactoryImpl implements org.nalby.yobatis.core.mybatis.mapper.MapperXmlElementFactory {

    private final static MapperXmlElementFactoryImpl instance = new MapperXmlElementFactoryImpl();

    private YobatisIntrospectedTable table;

    private MapperXmlElementFactoryImpl() { }

    public static MapperXmlElementFactoryImpl getInstance(YobatisIntrospectedTable table) {
        instance.table = table;
        return instance;
    }

    private void addXmlComment(XmlElement xmlElement) {
        xmlElement.addElement(new TextElement("<!--"));
        xmlElement.addElement(new TextElement("  WARNING - @mbg.generated"));
        xmlElement.addElement(new TextElement("  This element is automatically generated by MyBatis Generator, do not modify."));
        xmlElement.addElement(new TextElement("-->"));
    }

    private XmlElement baseResultMap() {
        XmlElement xmlElement = xmlTemplate("resultMap", XmlElementName.BASE_RESULT_MAP.getName());
        xmlElement.addAttribute(new Attribute("type", table.getFullyQualifiedJavaType(YobatisIntrospectedTable.ClassType.ENTITY).getFullyQualifiedName()));
        for (IntrospectedColumn column : table.getColumns()) {
            XmlElement columnMap;
            if (column.isIdentity()) {
                columnMap = new XmlElement("id");
            } else {
                columnMap = new XmlElement("result");
            }
            columnMap.addAttribute(new Attribute("column", column.getActualColumnName()));
            columnMap.addAttribute(new Attribute("jdbcType", column.getJdbcTypeName()));
            columnMap.addAttribute(new Attribute("property", column.getJavaProperty()));
            xmlElement.addElement(columnMap);
        }
        return xmlElement;
    }

    private XmlElement whereClause() {
        XmlElement xmlElement = new XmlElement("sql");
        xmlElement.addAttribute(new Attribute("id", XmlElementName.WHERE_CLAUSE.getName()));
        xmlElement.addElement(new TextElement("<!--\n" +
                "    WARNING - @mbg.generated\n" +
                "    This element is automatically generated by MyBatis Generator, do not modify.\n" +
                "  -->\n" +
                "  <where>\n" +
                "    <foreach collection=\"criteria.oredCriteria\" item=\"criteria\" separator=\"or\">\n" +
                "      <if test=\"criteria.valid\">\n" +
                "        <trim prefix=\"(\" prefixOverrides=\"and\" suffix=\")\">\n" +
                "          <foreach collection=\"criteria.criteria\" item=\"criterion\">\n" +
                "            <choose>\n" +
                "              <when test=\"criterion.noValue\">\n" +
                "                and ${criterion.condition}\n" +
                "              </when>\n" +
                "              <when test=\"criterion.singleValue\">\n" +
                "                and ${criterion.condition} #{criterion.value}\n" +
                "              </when>\n" +
                "              <when test=\"criterion.betweenValue\">\n" +
                "                and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}\n" +
                "              </when>\n" +
                "              <when test=\"criterion.listValue\">\n" +
                "                and ${criterion.condition}\n" +
                "                <foreach close=\")\" collection=\"criterion.value\" item=\"listItem\" open=\"(\" separator=\",\">\n" +
                "                  #{listItem}\n" +
                "                </foreach>\n" +
                "              </when>\n" +
                "            </choose>\n" +
                "          </foreach>\n" +
                "        </trim>\n" +
                "      </if>\n" +
                "    </foreach>\n" +
                "  </where>"));
        return xmlElement;
    }

    private XmlElement whereClauseForUpdate() {
        XmlElement xmlElement = new XmlElement("sql");
        xmlElement.addAttribute(new Attribute("id", XmlElementName.WHERE_CLAUSE_FOR_UPDATE.getName()));
        xmlElement.addElement(new TextElement("<!--\n" +
                "    WARNING - @mbg.generated\n" +
                "    This element is automatically generated by MyBatis Generator, do not modify.\n" +
                "  -->\n" +
                "  <where>\n" +
                "    <foreach collection=\"criteria.oredCriteria\" item=\"criteria\" separator=\"or\">\n" +
                "      <if test=\"criteria.valid\">\n" +
                "        <trim prefix=\"(\" prefixOverrides=\"and\" suffix=\")\">\n" +
                "          <foreach collection=\"criteria.criteria\" item=\"criterion\">\n" +
                "            <choose>\n" +
                "              <when test=\"criterion.noValue\">\n" +
                "                and ${criterion.condition}\n" +
                "              </when>\n" +
                "              <when test=\"criterion.singleValue\">\n" +
                "                and ${criterion.condition} #{criterion.value}\n" +
                "              </when>\n" +
                "              <when test=\"criterion.betweenValue\">\n" +
                "                and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}\n" +
                "              </when>\n" +
                "              <when test=\"criterion.listValue\">\n" +
                "                and ${criterion.condition}\n" +
                "                <foreach close=\")\" collection=\"criterion.value\" item=\"listItem\" open=\"(\" separator=\",\">\n" +
                "                  #{listItem}\n" +
                "                </foreach>\n" +
                "              </when>\n" +
                "            </choose>\n" +
                "          </foreach>\n" +
                "        </trim>\n" +
                "      </if>\n" +
                "    </foreach>\n" +
                "  </where>"));
        return xmlElement;
    }

    private XmlElement xmlTemplate(String name, String id) {
        XmlElement xmlElement = new XmlElement(name);
        xmlElement.addAttribute(new Attribute("id", id));
        addXmlComment(xmlElement);
        return xmlElement;
    }

    private XmlElement paging() {
        XmlElement xmlElement = new XmlElement("sql");
        xmlElement.addAttribute(new Attribute("id", XmlElementName.PAGING.getName()));
        xmlElement.addElement(new TextElement("<!--\n" +
                "    WARNING - @mbg.generated\n" +
                "    This element is automatically generated by MyBatis Generator, do not modify.\n" +
                "  -->\n" +
                "  <if test=\"offset != null\">\n" +
                "    offset #{offset}\n" +
                "  </if>\n" +
                "  <if test=\"limit != null\">\n" +
                "    limit #{limit}\n" +
                "  </if>"));
        return xmlElement;
    }

    private XmlElement baseColumnList() {
        XmlElement xmlElement = xmlTemplate("sql", XmlElementName.BASE_COLUMN_LIST.getName());
        StringBuilder stringBuilder = new StringBuilder();
        for (int i = 0; i < table.getColumns().size(); i++) {
            IntrospectedColumn column = table.getColumns().get(i);
            stringBuilder.append(column.getActualColumnName());
            if (i != table.getColumns().size() - 1) {
                stringBuilder.append(", ");
            }
            if ((i + 1) % 5 == 0) {
                stringBuilder.append("\n  ");
            }
        }
        xmlElement.addElement(new TextElement(stringBuilder.toString()));
        return xmlElement;
    }

    private XmlElement includeElement(String id) {
        XmlElement include = new XmlElement("include");
        include.addAttribute(new Attribute("refid", id));
        return include;
    }

    private XmlElement selectElementTemplate(String id, String paramType) {
        XmlElement xmlElement = xmlTemplate("select", id);
        xmlElement.addAttribute(new Attribute("parameterType", paramType));
        xmlElement.addAttribute(new Attribute("resultMap", XmlElementName.BASE_RESULT_MAP.getName()));
        xmlElement.addElement(new TextElement("select"));
        xmlElement.addElement(includeElement(XmlElementName.BASE_COLUMN_LIST.getName()));
        return xmlElement;
    }


    private XmlElement selectByPk() {
        XmlElement xmlElement = selectElementTemplate(XmlElementName.SELECT_ONE_BY_PK.getName(), table.getPrimaryKey().getFullyQualifiedName());
        StringBuilder stringBuilder = new StringBuilder("from " + table.getTableName() + " where\n    ");
        List<IntrospectedColumn> pkColumns = table.getPrimaryKeyColumns();
        for (int i = 0; i < pkColumns.size(); i++) {
            IntrospectedColumn column = pkColumns.get(i);
            if (i > 0) {
                stringBuilder.append("    and ");
            }
            stringBuilder.append(column.getActualColumnName());
            stringBuilder.append(" = #{");
            stringBuilder.append(column.getJavaProperty());
            stringBuilder.append(",jdbcType=");
            stringBuilder.append(column.getJdbcTypeName());
            stringBuilder.append("}");
            if (i != pkColumns.size() - 1) {
                stringBuilder.append("\n");
            }
        }
        xmlElement.addElement(new TextElement(stringBuilder.toString()));
        return xmlElement;
    }

    private XmlElement selectByCriteria() {
        XmlElement xmlElement = selectElementTemplate(XmlElementName.SELECT_BY_CRITERIA.getName(), table.getFullyQualifiedJavaType(
                YobatisIntrospectedTable.ClassType.CRITERIA).getFullyQualifiedName());
        String stringBuilder = "from " + table.getTableName() + "\n" +
                "  <if test=\"_parameter != null\">\n" +
                "    <include refid=\"WHERE_CLAUSE\" />\n" +
                "  </if>\n" +
                "  <if test=\"orderByClause != null\">\n" +
                "    order by ${orderByClause}\n" +
                "  </if>\n" +
                "  <include refid=\"PAGING\" />\n" +
                "  <if test=\"forUpdate\">\n" +
                "    for update\n" +
                "  </if>";
        xmlElement.addElement(new TextElement(stringBuilder));
        return xmlElement;
    }

    private XmlElement insert() {
        XmlElement xmlElement = xmlTemplate("insert", "INSERT");
        if (xmlElement.)
        return xmlElement;
    }

    @Override
    public XmlElement create(String name) {
        if (XmlElementName.WHERE_CLAUSE.nameEquals(name)) {
            return whereClause();
        } else if (XmlElementName.WHERE_CLAUSE_FOR_UPDATE.nameEquals(name)) {
            return whereClauseForUpdate();
        } else if (XmlElementName.PAGING.nameEquals(name)) {
            return paging();
        } else if (XmlElementName.BASE_RESULT_MAP.nameEquals(name)) {
            return baseResultMap();
        } else if (XmlElementName.BASE_COLUMN_LIST.nameEquals(name)) {
            return baseColumnList();
        } else if (XmlElementName.SELECT_ONE_BY_PK.nameEquals(name)) {
            return selectByPk();
        } else if (XmlElementName.SELECT_BY_CRITERIA.nameEquals(name)) {
            return selectByCriteria();
        } else if (XmlElementName.INSERT.nameEquals(name)) {
            return selectByCriteria();
        }
        throw new IllegalArgumentException("Unknown name");
    }

    public static void main(String[] args) {
//        XmlElement xmlElement = MapperXmlElementFactoryImpl.getInstance().create("PAGING");
//        System.out.println(xmlElement.getFormattedContent(0));
    }
}
