package unit.org.nalby.yobatis.core.mybatis.mapper;

import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.Node;
import org.dom4j.io.SAXReader;
import org.junit.Before;
import org.junit.Test;
import org.mybatis.generator.api.IntrospectedColumn;
import org.mybatis.generator.api.dom.java.FullyQualifiedJavaType;
import org.nalby.yobatis.core.mybatis.YobatisIntrospectedTable;
import org.nalby.yobatis.core.exception.InvalidUnitException;
import unit.org.nalby.yobatis.core.mybatis.AbstractYobatisTableSetup;
import org.nalby.yobatis.core.mybatis.mapper.MapperEntityResolver;
import org.nalby.yobatis.core.mybatis.mapper.XmlMapper;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.util.LinkedList;
import java.util.List;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.mockito.Mockito.when;

public class XmlMapperTests extends AbstractYobatisTableSetup {

    private XmlMapper xmlMapper;

    private List<IntrospectedColumn> columnList;

    private List<IntrospectedColumn> pkColumnList;

    private String fileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +
            "<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n" +
            "<mapper namespace=\"org.yobatis.entity.criteria.dao.impl.YobatisDaoImpl\">\n" +
            "  <select id=\"userDefined\" type=\"org.yobatis.entity.Yobatis\">\n" +
            "  </select>" +
            "  <sql id=\"PAGING\">\n" +
            "    <!--\n" +
            "      WARNING - @mbg.generated\n" +
            "      This element is automatically generated by MyBatis Generator, do not modify.\n" +
            "    -->\n" +
            "    <if test=\"offset != null\">\n" +
            "      offset #{offset}\n" +
            "    </if>\n" +
            "    <if test=\"limit != null\">\n" +
            "      limit #{limit}\n" +
            "    </if>\n" +
            "  </sql>\n" +
            "</mapper>";

    @Before
    public void setup() {
        super.setup();
        columnList = new LinkedList<>();
        when(yobatisIntrospectedTable.getColumns()).thenReturn(columnList);
        pkColumnList = new LinkedList<>();
        when(yobatisIntrospectedTable.getPrimaryKeyColumns()).thenReturn(pkColumnList);
    }

    private void addColumn(String name, String jbdc, String property) {
        IntrospectedColumn column = makeColumn(name, jbdc, property);
        when(column.isIdentity()).thenReturn(false);
        columnList.add(column);
    }

    private void addPkColumn(String name, String jbdc, String property) {
        IntrospectedColumn column = makeColumn(name, jbdc, property);
        when(column.getFullyQualifiedJavaType()).thenReturn(new FullyQualifiedJavaType("Integer"));
        when(yobatisIntrospectedTable.isAutoIncPrimaryKey()).thenReturn(true);
        when(column.isIdentity()).thenReturn(true);
        pkColumnList.add(column);
        columnList.add(column);
    }

    @Test
    public void wrap() {
        addPkColumn("id", "INT", "id");
        addColumn("field", "CHAR", "field");
        when(yobatisIntrospectedTable.getPathForGeneratedFile(YobatisIntrospectedTable.ClassType.XML_MAPPER)).thenReturn("/yobatis/mapper.xml");
        xmlMapper = XmlMapper.wrap(yobatisIntrospectedTable);
        assertEquals("/yobatis/mapper.xml", xmlMapper.getPathToPut());
        String result = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +
                "<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n" +
                "<mapper namespace=\"org.yobatis.entity.criteria.dao.impl.YobatisDaoImpl\">\n" +
                "  <resultMap id=\"BASE_RESULT_MAP\" type=\"org.yobatis.entity.Yobatis\">\n" +
                "    <!--\n" +
                "      WARNING - @mbg.generated\n" +
                "      This element is automatically generated by MyBatis Generator, do not modify.\n" +
                "    -->\n" +
                "    <id column=\"id\" jdbcType=\"INT\" property=\"id\" />\n" +
                "    <result column=\"field\" jdbcType=\"CHAR\" property=\"field\" />\n" +
                "  </resultMap>\n" +
                "  <sql id=\"WHERE_CLAUSE\">\n" +
                "    <!--\n" +
                "      WARNING - @mbg.generated\n" +
                "      This element is automatically generated by MyBatis Generator, do not modify.\n" +
                "    -->\n" +
                "    <if test=\"valid\" />\n" +
                "    <where>\n" +
                "      <foreach collection=\"oredCriteria\" item=\"bracketCriteria\" separator=\"or\">\n" +
                "        <if test=\"bracketCriteria.valid\">\n" +
                "          <trim prefix=\"(\" prefixOverrides=\"and\" suffix=\")\">\n" +
                "            <foreach collection=\"bracketCriteria.criteria\" item=\"criterion\">\n" +
                "              <choose>\n" +
                "                <when test=\"criterion.noValue\">\n" +
                "                  and ${criterion.condition}\n" +
                "                </when>\n" +
                "                <when test=\"criterion.singleValue\">\n" +
                "                  and ${criterion.condition} #{criterion.value}\n" +
                "                </when>\n" +
                "                <when test=\"criterion.betweenValue\">\n" +
                "                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}\n" +
                "                </when>\n" +
                "                <when test=\"criterion.listValue\">\n" +
                "                  and ${criterion.condition}\n" +
                "                  <foreach close=\")\" collection=\"criterion.value\" item=\"listItem\" open=\"(\" separator=\",\">\n" +
                "                    #{listItem}\n" +
                "                  </foreach>\n" +
                "                </when>\n" +
                "              </choose>\n" +
                "            </foreach>\n" +
                "          </trim>\n" +
                "        </if>\n" +
                "      </foreach>\n" +
                "    </where>\n" +
                "  </sql>\n" +
                "  <sql id=\"WHERE_CLAUSE_FOR_UPDATE\">\n" +
                "    <!--\n" +
                "      WARNING - @mbg.generated\n" +
                "      This element is automatically generated by MyBatis Generator, do not modify.\n" +
                "    -->\n" +
                "    <if test=\"valid\" />\n" +
                "    <where>\n" +
                "      <foreach collection=\"criteria.oredCriteria\" item=\"bracketCriteria\" separator=\"or\">\n" +
                "        <if test=\"bracketCriteria.valid\">\n" +
                "          <trim prefix=\"(\" prefixOverrides=\"and\" suffix=\")\">\n" +
                "            <foreach collection=\"bracketCriteria.criteria\" item=\"criterion\">\n" +
                "              <choose>\n" +
                "                <when test=\"criterion.noValue\">\n" +
                "                  and ${criterion.condition}\n" +
                "                </when>\n" +
                "                <when test=\"criterion.singleValue\">\n" +
                "                  and ${criterion.condition} #{criterion.value}\n" +
                "                </when>\n" +
                "                <when test=\"criterion.betweenValue\">\n" +
                "                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}\n" +
                "                </when>\n" +
                "                <when test=\"criterion.listValue\">\n" +
                "                  and ${criterion.condition}\n" +
                "                  <foreach close=\")\" collection=\"criterion.value\" item=\"listItem\" open=\"(\" separator=\",\">\n" +
                "                    #{listItem}\n" +
                "                  </foreach>\n" +
                "                </when>\n" +
                "              </choose>\n" +
                "            </foreach>\n" +
                "          </trim>\n" +
                "        </if>\n" +
                "      </foreach>\n" +
                "    </where>\n" +
                "  </sql>\n" +
                "  <sql id=\"BASE_COLUMN_LIST\">\n" +
                "    <!--\n" +
                "      WARNING - @mbg.generated\n" +
                "      This element is automatically generated by MyBatis Generator, do not modify.\n" +
                "    -->\n" +
                "    id, field\n" +
                "  </sql>\n" +
                "  <sql id=\"PAGING\">\n" +
                "    <!--\n" +
                "      WARNING - @mbg.generated\n" +
                "      This element is automatically generated by MyBatis Generator, do not modify.\n" +
                "    -->\n" +
                "    <if test=\"offset != null\">\n" +
                "      offset #{offset}\n" +
                "    </if>\n" +
                "    <if test=\"limit != null\">\n" +
                "      limit #{limit}\n" +
                "    </if>\n" +
                "  </sql>\n" +
                "  <sql id=\"PRIVATE_SELECT_BY_CRITERIA\">\n" +
                "    <!--\n" +
                "      WARNING - @mbg.generated\n" +
                "      This element is automatically generated by MyBatis Generator, do not modify.\n" +
                "    -->\n" +
                "    select\n" +
                "    <include refid=\"BASE_COLUMN_LIST\" />\n" +
                "    from yobatis\n" +
                "    <include refid=\"WHERE_CLAUSE\" />\n" +
                "    <if test=\"orderByClause != null\">\n" +
                "      order by ${orderByClause}\n" +
                "    </if>\n" +
                "    <include refid=\"PAGING\" />\n" +
                "    <if test=\"forUpdate\">\n" +
                "      for update\n" +
                "    </if>\n" +
                "  </sql>\n" +
                "  <insert id=\"insert\" parameterType=\"org.yobatis.entity.base.BaseYobatis\">\n" +
                "    <!--\n" +
                "      WARNING - @mbg.generated\n" +
                "      This element is automatically generated by MyBatis Generator, do not modify.\n" +
                "    -->\n" +
                "    insert into yobatis\n" +
                "    (id, field)\n" +
                "    values (#{id,jdbcType=INT}, #{field,jdbcType=CHAR})\n" +
                "    <selectKey keyProperty=\"id\" order=\"AFTER\" resultType=\"Integer\">\n" +
                "      <if test=\"id == null\">\n" +
                "        select last_insert_id()\n" +
                "      </if>\n" +
                "      <if test=\"id != null\">\n" +
                "        select #{id}\n" +
                "      </if>\n" +
                "    </selectKey>\n" +
                "  </insert>\n" +
                "  <select id=\"selectByPk\" parameterType=\"long\" resultMap=\"BASE_RESULT_MAP\">\n" +
                "    <!--\n" +
                "      WARNING - @mbg.generated\n" +
                "      This element is automatically generated by MyBatis Generator, do not modify.\n" +
                "    -->\n" +
                "    select\n" +
                "    <include refid=\"BASE_COLUMN_LIST\" />\n" +
                "    from yobatis where\n" +
                "    id = #{id,jdbcType=INT}\n" +
                "  </select>\n" +
                "  <select id=\"selectByCriteria\" parameterType=\"org.yobatis.entity.criteria.YobatisCriteria\" resultMap=\"BASE_RESULT_MAP\">\n" +
                "    <!--\n" +
                "      WARNING - @mbg.generated\n" +
                "      This element is automatically generated by MyBatis Generator, do not modify.\n" +
                "    -->\n" +
                "    <include refid=\"PRIVATE_SELECT_BY_CRITERIA\" />\n" +
                "  </select>\n" +
                "  <select id=\"selectList\" parameterType=\"org.yobatis.entity.criteria.YobatisCriteria\" resultMap=\"BASE_RESULT_MAP\">\n" +
                "    <!--\n" +
                "      WARNING - @mbg.generated\n" +
                "      This element is automatically generated by MyBatis Generator, do not modify.\n" +
                "    -->\n" +
                "    <include refid=\"PRIVATE_SELECT_BY_CRITERIA\" />\n" +
                "  </select>\n" +
                "  <select id=\"count\" parameterType=\"org.yobatis.entity.criteria.YobatisCriteria\" resultType=\"int\">\n" +
                "    <!--\n" +
                "      WARNING - @mbg.generated\n" +
                "      This element is automatically generated by MyBatis Generator, do not modify.\n" +
                "    -->\n" +
                "    select count(*) from yobatis\n" +
                "    <include refid=\"WHERE_CLAUSE\" />\n" +
                "  </select>\n" +
                "  <update id=\"updateByPk\" parameterType=\"long\">\n" +
                "    <!--\n" +
                "      WARNING - @mbg.generated\n" +
                "      This element is automatically generated by MyBatis Generator, do not modify.\n" +
                "    -->\n" +
                "    update yobatis\n" +
                "    <set>\n" +
                "      <if test=\"field != null\">\n" +
                "        field = #{field,jdbcType=CHAR},\n" +
                "      </if>\n" +
                "    </set>\n" +
                "    where id = #{id,jdbcType=INT}\n" +
                "  </update>\n" +
                "  <update id=\"updateByCriteria\" parameterType=\"map\">\n" +
                "    <!--\n" +
                "      WARNING - @mbg.generated\n" +
                "      This element is automatically generated by MyBatis Generator, do not modify.\n" +
                "    -->\n" +
                "    update yobatis\n" +
                "    <set>\n" +
                "      <if test=\"record.id != null\">\n" +
                "        id = #{record.id,jdbcType=INT},\n" +
                "      </if>\n" +
                "      <if test=\"record.field != null\">\n" +
                "        field = #{record.field,jdbcType=CHAR},\n" +
                "      </if>\n" +
                "    </set>\n" +
                "    <include refid=\"WHERE_CLAUSE_FOR_UPDATE\" />\n" +
                "  </update>\n" +
                "  <delete id=\"deleteByPk\" parameterType=\"long\">\n" +
                "    <!--\n" +
                "      WARNING - @mbg.generated\n" +
                "      This element is automatically generated by MyBatis Generator, do not modify.\n" +
                "    -->\n" +
                "    delete from yobatis\n" +
                "    where id = #{id,jdbcType=INT}\n" +
                "  </delete>\n" +
                "  <delete id=\"deleteByCriteria\" parameterType=\"org.yobatis.entity.criteria.YobatisCriteria\">\n" +
                "    <!--\n" +
                "      WARNING - @mbg.generated\n" +
                "      This element is automatically generated by MyBatis Generator, do not modify.\n" +
                "    -->\n" +
                "    delete from yobatis\n" +
                "    <include refid=\"WHERE_CLAUSE\" />\n" +
                "  </delete>\n" +
                "</mapper>";
        assertEquals(result.replaceAll("\\s+", ""), xmlMapper.getFormattedContent().replaceAll("\\s+", ""));
    }

    @Test
    public void merge() throws InvalidUnitException, DocumentException {
        addPkColumn("id", "INT", "id");
        addColumn("field", "CHAR", "field");
        xmlMapper = XmlMapper.wrap(yobatisIntrospectedTable);
        xmlMapper.merge(fileContent);
        InputStream inputStream = new ByteArrayInputStream(xmlMapper.getFormattedContent().getBytes());
        SAXReader saxReader = new SAXReader();
        saxReader.setEntityResolver(new MapperEntityResolver());
        Document document = saxReader.read(inputStream);
        Node node = document.selectSingleNode("//select[@id='userDefined']");
        assertNotNull(node);
        List<Node> nodeList = document.selectNodes("//sql[@id='PAGING']");
        assertEquals(1, nodeList.size());
    }
}
