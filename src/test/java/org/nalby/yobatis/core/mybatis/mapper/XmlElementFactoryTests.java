package org.nalby.yobatis.core.mybatis.mapper;

import org.junit.Before;
import org.junit.Test;
import org.mybatis.generator.api.IntrospectedColumn;
import org.mybatis.generator.api.dom.java.FullyQualifiedJavaType;
import org.mybatis.generator.api.dom.xml.XmlElement;
import org.nalby.yobatis.core.database.YobatisIntrospectedTable;

import java.util.LinkedList;
import java.util.List;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class XmlElementFactoryTests {

    private YobatisIntrospectedTable yobatisIntrospectedTable;

    private List<IntrospectedColumn> columnList;

    private MapperXmlElementFactory factory;

    private List<IntrospectedColumn> pkColumnList;


    @Before
    public void setup() {
        yobatisIntrospectedTable = mock(YobatisIntrospectedTable.class);
        when(yobatisIntrospectedTable.getFullyQualifiedJavaType(YobatisIntrospectedTable.ClassType.ENTITY))
                .thenReturn(new FullyQualifiedJavaType("org.yobatis.entity.Yobatis"));
        when(yobatisIntrospectedTable.getFullyQualifiedJavaType(YobatisIntrospectedTable.ClassType.CRITERIA))
                .thenReturn(new FullyQualifiedJavaType("org.yobatis.entity.criteria.YobatisCriteria"));
        columnList = new LinkedList<>();
        when(yobatisIntrospectedTable.getColumns()).thenReturn(columnList);
        pkColumnList = new LinkedList<>();
        when(yobatisIntrospectedTable.getPrimaryKeyColumns()).thenReturn(pkColumnList);

        when(yobatisIntrospectedTable.getTableName()).thenReturn("yobatis");

        factory = MapperXmlElementFactoryImpl.getInstance(yobatisIntrospectedTable);
    }

    private IntrospectedColumn addColumn(boolean id, String name, String jdbcType, String javaProperty) {
        IntrospectedColumn column = mock(IntrospectedColumn.class);
        when(column.isIdentity()).thenReturn(id);
        when(column.getActualColumnName()).thenReturn(name);
        when(column.getJdbcTypeName()).thenReturn(jdbcType);
        when(column.getJavaProperty()).thenReturn(javaProperty);
        columnList.add(column);
        return column;
    }

    private IntrospectedColumn addPk(String name, String jdbcType, String javaProperty) {
        IntrospectedColumn column = mock(IntrospectedColumn.class);
        when(column.getActualColumnName()).thenReturn(name);
        when(column.getJdbcTypeName()).thenReturn(jdbcType);
        when(column.getJavaProperty()).thenReturn(javaProperty);
        pkColumnList.add(column);
        return column;
    }

    @Test
    public void baseResultMap() {
        addColumn(true, "pk", "INT", "pk");
        addColumn(true, "pk_ext", "CHAR", "pkExt");
        XmlElement element = factory.create(XmlElementName.BASE_RESULT_MAP.getName());
        String result = "<resultMap id=\"BASE_RESULT_MAP\" type=\"org.yobatis.entity.Yobatis\">\n" +
                "  <!--\n" +
                "    WARNING - @mbg.generated\n" +
                "    This element is automatically generated by MyBatis Generator, do not modify.\n" +
                "  -->\n" +
                "  <id column=\"pk\" jdbcType=\"INT\" property=\"pk\" />\n" +
                "  <id column=\"pk_ext\" jdbcType=\"CHAR\" property=\"pkExt\" />\n" +
                "</resultMap>";
        assertEquals(result.replaceAll("\\s+", ""), element.getFormattedContent(0).replaceAll("\\s+", ""));
        result = "<resultMap id=\"BASE_RESULT_MAP\" type=\"org.yobatis.entity.Yobatis\">\n" +
                "  <!--\n" +
                "    WARNING - @mbg.generated\n" +
                "    This element is automatically generated by MyBatis Generator, do not modify.\n" +
                "  -->\n" +
                "  <id column=\"pk\" jdbcType=\"INT\" property=\"pk\" />\n" +
                "  <id column=\"pk_ext\" jdbcType=\"CHAR\" property=\"pkExt\" />\n" +
                "  <result column=\"field\" jdbcType=\"DECIMAL\" property=\"field\" />\n" +
                "</resultMap>";
        addColumn(false, "field", "DECIMAL", "field");
        element = factory.create(XmlElementName.BASE_RESULT_MAP.getName());

        assertEquals(result.replaceAll("\\s+", ""), element.getFormattedContent(0).replaceAll("\\s+", ""));
    }

    @Test
    public void paging() {
        String result = "  <sql id=\"PAGING\">\n" +
                "    <!--\n" +
                "      WARNING - @mbg.generated\n" +
                "      This element is automatically generated by MyBatis Generator, do not modify.\n" +
                "    -->\n" +
                "    <if test=\"offset != null\">\n" +
                "      offset #{offset}\n" +
                "    </if>\n" +
                "    <if test=\"limit != null\">\n" +
                "      limit #{limit}\n" +
                "    </if>\n" +
                "  </sql>";
        XmlElement element = factory.create(XmlElementName.PAGING.getName());
        assertEquals(result.replaceAll("\\s+", ""), element.getFormattedContent(0).replaceAll("\\s+", ""));
    }

    @Test
    public void baseColumnList() {
        addColumn(true, "pk", "INT", "pk");
        for (int i = 1; i <= 12; i++) {
            addColumn(false, "field" + i, "DECIMAL", "javaField" +i);
        }
        XmlElement element = factory.create(XmlElementName.BASE_COLUMN_LIST.getName());
        String content = element.getFormattedContent(0);
        assertTrue(content.contains("pk, field1, field2, field3, field4,"));
        assertTrue(content.contains("field5, field6, field7, field8, field9,"));

        assertFalse(content.contains("pk, field1, field2, field3, field4, field5"));
    }

    @Test
    public void selectOneByPk() {
        addPk("pk1", "CHAR", "pk1");
        String result = "<select id=\"SELECT_ONE_BY_PK\" parameterType=\"java.util.Long\" resultMap=\"BASE_RESULT_MAP\">\n" +
                "  <!--\n" +
                "    WARNING - @mbg.generated\n" +
                "    This element is automatically generated by MyBatis Generator, do not modify.\n" +
                "  -->\n" +
                "  select\n" +
                "  <include refid=\"BASE_COLUMN_LIST\" />\n" +
                "  from yobatis where\n" +
                "    pk1 = #{pk1,jdbcType=CHAR}\n" +
                "</select>";
        when(yobatisIntrospectedTable.getPrimaryKey()).thenReturn(new FullyQualifiedJavaType("java.util.Long"));
        XmlElement element = factory.create(XmlElementName.SELECT_ONE_BY_PK.getName());
        assertEquals(result.replaceAll("\\s+", ""), element.getFormattedContent(0).replaceAll("\\s+", ""));

        when(yobatisIntrospectedTable.getPrimaryKey()).thenReturn(new FullyQualifiedJavaType("org.yobatis.Yobatis"));
        addPk("pk_ext", "INT", "pkExt");
        element = factory.create(XmlElementName.SELECT_ONE_BY_PK.getName());
        result = "<select id=\"SELECT_ONE_BY_PK\" parameterType=\"org.yobatis.Yobatis\" resultMap=\"BASE_RESULT_MAP\">\n" +
                "  <!--\n" +
                "    WARNING - @mbg.generated\n" +
                "    This element is automatically generated by MyBatis Generator, do not modify.\n" +
                "  -->\n" +
                "  select\n" +
                "  <include refid=\"BASE_COLUMN_LIST\" />\n" +
                "  from yobatis where\n" +
                "    pk1 = #{pk1,jdbcType=CHAR}\n" +
                "    and pk_ext = #{pkExt,jdbcType=INT}\n" +
                "</select>";
        assertEquals(result.replaceAll("\\s+", ""), element.getFormattedContent(0).replaceAll("\\s+", ""));
    }


    @Test
    public void selectOneByCriteria() {
        XmlElement element = factory.create(XmlElementName.SELECT_BY_CRITERIA.getName());
        String result = "<select id=\"SELECT_BY_CRITERIA\" parameterType=\"org.yobatis.entity.criteria.YobatisCriteria\" resultMap=\"BASE_RESULT_MAP\">\n" +
                "  <!--\n" +
                "    WARNING - @mbg.generated\n" +
                "    This element is automatically generated by MyBatis Generator, do not modify.\n" +
                "  -->\n" +
                "  select\n" +
                "  <include refid=\"BASE_COLUMN_LIST\" />\n" +
                "  from yobatis\n" +
                "  <if test=\"_parameter != null\">\n" +
                "    <include refid=\"WHERE_CLAUSE\" />\n" +
                "  </if>\n" +
                "  <if test=\"orderByClause != null\">\n" +
                "    order by ${orderByClause}\n" +
                "  </if>\n" +
                "  <include refid=\"PAGING\" />\n" +
                "  <if test=\"forUpdate\">\n" +
                "    for update\n" +
                "  </if>\n" +
                "</select>";
        assertEquals(result.replaceAll("\\s+", ""), element.getFormattedContent(0).replaceAll("\\s+", ""));
    }

}
