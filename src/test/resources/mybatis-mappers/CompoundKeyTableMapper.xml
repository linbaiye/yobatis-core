<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="func.compoundkey.dao.impl.CompoundKeyTableDaoImpl">
  <resultMap id="BASE_RESULT_MAP" type="func.compoundkey.model.CompoundKeyTable">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <id column="pk1" jdbcType="INTEGER" property="pk1" />
    <id column="pk2" jdbcType="CHAR" property="pk2" />
    <result column="f3" jdbcType="LONGVARCHAR" property="f3" />
  </resultMap>
  <sql id="WHERE_CLAUSE">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="WHERE_CLAUSE_FOR_UPDATE">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="BASE_COLUMN_LIST">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    pk1, pk2, f3
  </sql>
  <select id="selectByCriteria" parameterType="func.compoundkey.model.criteria.CompoundKeyTableCriteria" resultMap="BASE_RESULT_MAP">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="BASE_COLUMN_LIST" />
    from compound_key_table
    <if test="_parameter != null">
      <include refid="WHERE_CLAUSE" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <include refid="_PAGING_" />
    <if test="forUpdate != null and forUpdate == true">
      for update
    </if>
  </select>
  <select id="selectByPk" parameterType="func.compoundkey.model.CompoundKeyTable" resultMap="BASE_RESULT_MAP">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select 
    <include refid="BASE_COLUMN_LIST" />
    from compound_key_table
    where pk1 = #{pk1,jdbcType=INTEGER}
      and pk2 = #{pk2,jdbcType=CHAR}
  </select>
  <delete id="deleteByPk" parameterType="func.compoundkey.model.base.BaseCompoundKeyTable">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from compound_key_table
    where pk1 = #{pk1,jdbcType=INTEGER}
      and pk2 = #{pk2,jdbcType=CHAR}
  </delete>
  <delete id="deleteByCriteria" parameterType="func.compoundkey.model.criteria.CompoundKeyTableCriteria">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from compound_key_table
    <if test="_parameter != null">
      <include refid="WHERE_CLAUSE" />
    </if>
  </delete>
  <insert id="insert" parameterType="func.compoundkey.model.base.BaseCompoundKeyTable">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into compound_key_table
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="pk1 != null">
        pk1,
      </if>
      <if test="pk2 != null">
        pk2,
      </if>
      <if test="f3 != null">
        f3,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="pk1 != null">
        #{pk1,jdbcType=INTEGER},
      </if>
      <if test="pk2 != null">
        #{pk2,jdbcType=CHAR},
      </if>
      <if test="f3 != null">
        #{f3,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <insert id="insertAll" parameterType="func.compoundkey.model.base.BaseCompoundKeyTable">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into compound_key_table (pk1, pk2, f3)
    values (#{pk1,jdbcType=INTEGER}, #{pk2,jdbcType=CHAR}, #{f3,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertAllIgnore" parameterType="func.compoundkey.model.CompoundKeyTable">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert ignore into compound_key_table (pk1, pk2, f3)
    values (#{pk1,jdbcType=INTEGER}, #{pk2,jdbcType=CHAR}, #{f3,jdbcType=LONGVARCHAR})
  </insert>
  <select id="count" parameterType="func.compoundkey.model.criteria.CompoundKeyTableCriteria" resultType="java.lang.Long">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select count(*) from compound_key_table
    <if test="_parameter != null">
      <include refid="WHERE_CLAUSE" />
    </if>
  </select>
  <update id="updateByCriteria" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update compound_key_table
    <set>
      <if test="record.pk1 != null">
        pk1 = #{record.pk1,jdbcType=INTEGER},
      </if>
      <if test="record.pk2 != null">
        pk2 = #{record.pk2,jdbcType=CHAR},
      </if>
      <if test="record.f3 != null">
        f3 = #{record.f3,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="WHERE_CLAUSE_FOR_UPDATE" />
    </if>
  </update>
  <update id="updateAllByCriteria" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update compound_key_table
    set pk1 = #{record.pk1,jdbcType=INTEGER},
      pk2 = #{record.pk2,jdbcType=CHAR},
      f3 = #{record.f3,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="WHERE_CLAUSE_FOR_UPDATE" />
    </if>
  </update>
  <update id="update" parameterType="func.compoundkey.model.base.BaseCompoundKeyTable">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update compound_key_table
    <set>
      <if test="f3 != null">
        f3 = #{f3,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where pk1 = #{pk1,jdbcType=INTEGER}
      and pk2 = #{pk2,jdbcType=CHAR}
  </update>
  <update id="updateAll" parameterType="func.compoundkey.model.base.BaseCompoundKeyTable">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update compound_key_table
    set f3 = #{f3,jdbcType=LONGVARCHAR}
    where pk1 = #{pk1,jdbcType=INTEGER}
      and pk2 = #{pk2,jdbcType=CHAR}
  </update>
  <sql id="_PAGING_">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <if test="limit != null">
      limit #{limit}
    </if>
    <if test="offset != null">
      offset #{offset}
    </if>
  </sql>
</mapper>